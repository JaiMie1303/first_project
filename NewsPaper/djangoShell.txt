python manage.py shell

from news.models import User, Author, Category, Post, Comment


1) Создать двух пользователей (с помощью метода User.objects.create_user('username'))
user1 = User.objects.create_user('Michael')
user2 = User.objects.create_user('John')
user3 = User.objects.create_user('Sarah')

2) Создать два объекта модели Author, связанные с пользователями.
Author.objects.create(user=user1)
Author.objects.create(user=user2)
Author.objects.create(user=user3)


3) Добавить 4 категории в модель Category:
Category.objects.create(name_category = 'Games')
Category.objects.create(name_category = 'Movies')
Category.objects.create(name_category = 'Music')
Category.objects.create(name_category = 'Books')

4) Добавить 2 статьи и 1 новость:

author = Author.objects.get(id=1)
Post.objects.create(author=author, type_post='NW', post_title='Лучшие фильмы - катастрофы', post_text='Здесь вы найдете подборку лучших фильмов 2023 года')

author2 = Author.objects.get(id=3)
Post.objects.create(author=author2, type_post='AR', post_title='Чему нас могут научить компьтерные игры?', post_text='Популярность компьютерных игр растет с каждым днем, дети и взрослые проводят за этим занятием все больше времени, что заставляет задуматься, как использовать игроманию во благо — в первую очередь, для обучения.')

author3 = Author.objects.get(id=2)
Post.objects.create(author=author3, type_post='AR', post_title='Частые ошибки при написании песен', post_text='При написании песен многие молодые авторы совершают ряд характерных ошибок, которые можно сгруппировать и составить отдельный ТОП. Да, эти ошибки встречаются достаточно часто и не у одного автора. При этом совершенно неважно, какую музыку вы играете, будь то кантри, рок, электроника или инди-поп – наверняка вы хотите, чтобы ваши песни были интересны вашему слушателю.')


5) Присвоить им категории (как минимум в одной статье/новости должно быть не меньше 2 категорий).
p1 = Post.objects.get(id=6)
p1.post_category.add(Category.objects.get(id=1))
p1.post_category.add(Category.objects.get(id=3))

p2 = Post.objects.get(id=7)
p2.post_category.add(Category.objects.get(id=3))
p2.post_category.add(Category.objects.get(id=1))

p3 = Post.objects.get(id=5)
p3.post_category.add(Category.objects.get(id=2))

6) Создать как минимум 4 комментария к разным объектам модели Post (в каждом объекте должен быть как минимум один комментарий).:
Comment.objects.create(post=Post.objects.get(id=5), user=User.objects.get(id=2), text_comment='Спасибо, здорово!')
Comment.objects.create(post=Post.objects.get(id=6), user=User.objects.get(id=2), text_comment='Как думаете, стоит брать?')
Comment.objects.create(post=Post.objects.get(id=7), user=User.objects.get(id=1), text_comment='Занимательно')
Comment.objects.create(post=Post.objects.get(id=5), user=User.objects.get(id=3), text_comment='Типа того...')

7) Применяя функции like() и dislike() к статьям/новостям и комментариям, скорректировать рейтинги этих объектов:

Comment.objects.get(id=1).like()
Comment.objects.get(id=1).like()
Comment.objects.get(id=1).dislike()
Comment.objects.get(id=1).like()
Comment.objects.get(id=1).like()
Comment.objects.get(id=3).like()
Comment.objects.get(id=3).like()
Comment.objects.get(id=1).dislike()
Comment.objects.get(id=2).like()
Comment.objects.get(id=2).like()
Comment.objects.get(id=2).like()
Comment.objects.get(id=2).like()
Comment.objects.get(id=2).like()
Comment.objects.get(id=2).like()
Comment.objects.get(id=4).like()
Comment.objects.get(id=4).like()
Comment.objects.get(id=4).like()


Post.objects.get(id=7).dislike()
Post.objects.get(id=5).like()
Post.objects.get(id=6).like()
Post.objects.get(id=5).like()

8) Обновить рейтинги пользователей:

a = Author.objects.get(id=1)
a.update_rating()
a = Author.objects.get(id=2)
a.update_rating()
a = Author.objects.get(id=3)
a.update_rating()

9) Вывести username и рейтинг лучшего пользователя (применяя сортировку и возвращая поля первого объекта):

Author.objects.order_by('author_rating').last().user.username
Author.objects.order_by('author_rating').last().author_rating

10) Вывести дату добавления, username автора, рейтинг, заголовок и превью лучшей статьи,
основываясь на лайках/дислайках к этой статье:

a = Post.objects.order_by('-post_rating').first()
a.date_of_post
a.author.user.username
a.post_rating
a.post_title
a.preview()

11) Вывести все комментарии (дата, пользователь, рейтинг, текст) к этой статье:

comments = Comment.objects.all().filter(post_id=a.id)
for comment in comments:
    print(comment.date_of_comment)
    print(User.objects.get(id=comment.user_id))
    print(comment.comment_rating)
    print(comment.comment_text)